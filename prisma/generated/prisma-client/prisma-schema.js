module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBid {
  count: Int!
}

type AggregateClaim {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateRegion {
  count: Int!
}

type AggregateService {
  count: Int!
}

type AggregateServiceItem {
  count: Int!
}

type AggregateSpecialty {
  count: Int!
}

type AggregateSpecialtyItem {
  count: Int!
}

type AggregateStudy {
  count: Int!
}

type AggregateTherapeutic {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Bid {
  id: ID!
  company: Company!
  bid_amount: Float!
  is_approved: Boolean!
  study: Study!
}

type BidConnection {
  pageInfo: PageInfo!
  edges: [BidEdge]!
  aggregate: AggregateBid!
}

input BidCreateInput {
  id: ID
  company: CompanyCreateOneWithoutBidsInput!
  bid_amount: Float!
  is_approved: Boolean
  study: StudyCreateOneInput!
}

input BidCreateManyWithoutCompanyInput {
  create: [BidCreateWithoutCompanyInput!]
  connect: [BidWhereUniqueInput!]
}

input BidCreateWithoutCompanyInput {
  id: ID
  bid_amount: Float!
  is_approved: Boolean
  study: StudyCreateOneInput!
}

type BidEdge {
  node: Bid!
  cursor: String!
}

enum BidOrderByInput {
  id_ASC
  id_DESC
  bid_amount_ASC
  bid_amount_DESC
  is_approved_ASC
  is_approved_DESC
}

type BidPreviousValues {
  id: ID!
  bid_amount: Float!
  is_approved: Boolean!
}

input BidScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  bid_amount: Float
  bid_amount_not: Float
  bid_amount_in: [Float!]
  bid_amount_not_in: [Float!]
  bid_amount_lt: Float
  bid_amount_lte: Float
  bid_amount_gt: Float
  bid_amount_gte: Float
  is_approved: Boolean
  is_approved_not: Boolean
  AND: [BidScalarWhereInput!]
  OR: [BidScalarWhereInput!]
  NOT: [BidScalarWhereInput!]
}

type BidSubscriptionPayload {
  mutation: MutationType!
  node: Bid
  updatedFields: [String!]
  previousValues: BidPreviousValues
}

input BidSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BidWhereInput
  AND: [BidSubscriptionWhereInput!]
  OR: [BidSubscriptionWhereInput!]
  NOT: [BidSubscriptionWhereInput!]
}

input BidUpdateInput {
  company: CompanyUpdateOneRequiredWithoutBidsInput
  bid_amount: Float
  is_approved: Boolean
  study: StudyUpdateOneRequiredInput
}

input BidUpdateManyDataInput {
  bid_amount: Float
  is_approved: Boolean
}

input BidUpdateManyMutationInput {
  bid_amount: Float
  is_approved: Boolean
}

input BidUpdateManyWithoutCompanyInput {
  create: [BidCreateWithoutCompanyInput!]
  delete: [BidWhereUniqueInput!]
  connect: [BidWhereUniqueInput!]
  set: [BidWhereUniqueInput!]
  disconnect: [BidWhereUniqueInput!]
  update: [BidUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [BidUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [BidScalarWhereInput!]
  updateMany: [BidUpdateManyWithWhereNestedInput!]
}

input BidUpdateManyWithWhereNestedInput {
  where: BidScalarWhereInput!
  data: BidUpdateManyDataInput!
}

input BidUpdateWithoutCompanyDataInput {
  bid_amount: Float
  is_approved: Boolean
  study: StudyUpdateOneRequiredInput
}

input BidUpdateWithWhereUniqueWithoutCompanyInput {
  where: BidWhereUniqueInput!
  data: BidUpdateWithoutCompanyDataInput!
}

input BidUpsertWithWhereUniqueWithoutCompanyInput {
  where: BidWhereUniqueInput!
  update: BidUpdateWithoutCompanyDataInput!
  create: BidCreateWithoutCompanyInput!
}

input BidWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  company: CompanyWhereInput
  bid_amount: Float
  bid_amount_not: Float
  bid_amount_in: [Float!]
  bid_amount_not_in: [Float!]
  bid_amount_lt: Float
  bid_amount_lte: Float
  bid_amount_gt: Float
  bid_amount_gte: Float
  is_approved: Boolean
  is_approved_not: Boolean
  study: StudyWhereInput
  AND: [BidWhereInput!]
  OR: [BidWhereInput!]
  NOT: [BidWhereInput!]
}

input BidWhereUniqueInput {
  id: ID
}

type Claim {
  id: ID!
  user: String!
  email: String!
  name: String!
  company: Company!
  pending: Boolean!
  approved: Boolean!
  createdAt: DateTime!
}

type ClaimConnection {
  pageInfo: PageInfo!
  edges: [ClaimEdge]!
  aggregate: AggregateClaim!
}

input ClaimCreateInput {
  id: ID
  user: String!
  email: String!
  name: String!
  company: CompanyCreateOneWithoutClaimsInput!
  pending: Boolean
  approved: Boolean
}

input ClaimCreateManyWithoutCompanyInput {
  create: [ClaimCreateWithoutCompanyInput!]
  connect: [ClaimWhereUniqueInput!]
}

input ClaimCreateWithoutCompanyInput {
  id: ID
  user: String!
  email: String!
  name: String!
  pending: Boolean
  approved: Boolean
}

type ClaimEdge {
  node: Claim!
  cursor: String!
}

enum ClaimOrderByInput {
  id_ASC
  id_DESC
  user_ASC
  user_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  pending_ASC
  pending_DESC
  approved_ASC
  approved_DESC
  createdAt_ASC
  createdAt_DESC
}

type ClaimPreviousValues {
  id: ID!
  user: String!
  email: String!
  name: String!
  pending: Boolean!
  approved: Boolean!
  createdAt: DateTime!
}

input ClaimScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: String
  user_not: String
  user_in: [String!]
  user_not_in: [String!]
  user_lt: String
  user_lte: String
  user_gt: String
  user_gte: String
  user_contains: String
  user_not_contains: String
  user_starts_with: String
  user_not_starts_with: String
  user_ends_with: String
  user_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  pending: Boolean
  pending_not: Boolean
  approved: Boolean
  approved_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ClaimScalarWhereInput!]
  OR: [ClaimScalarWhereInput!]
  NOT: [ClaimScalarWhereInput!]
}

type ClaimSubscriptionPayload {
  mutation: MutationType!
  node: Claim
  updatedFields: [String!]
  previousValues: ClaimPreviousValues
}

input ClaimSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClaimWhereInput
  AND: [ClaimSubscriptionWhereInput!]
  OR: [ClaimSubscriptionWhereInput!]
  NOT: [ClaimSubscriptionWhereInput!]
}

input ClaimUpdateInput {
  user: String
  email: String
  name: String
  company: CompanyUpdateOneRequiredWithoutClaimsInput
  pending: Boolean
  approved: Boolean
}

input ClaimUpdateManyDataInput {
  user: String
  email: String
  name: String
  pending: Boolean
  approved: Boolean
}

input ClaimUpdateManyMutationInput {
  user: String
  email: String
  name: String
  pending: Boolean
  approved: Boolean
}

input ClaimUpdateManyWithoutCompanyInput {
  create: [ClaimCreateWithoutCompanyInput!]
  delete: [ClaimWhereUniqueInput!]
  connect: [ClaimWhereUniqueInput!]
  set: [ClaimWhereUniqueInput!]
  disconnect: [ClaimWhereUniqueInput!]
  update: [ClaimUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [ClaimUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [ClaimScalarWhereInput!]
  updateMany: [ClaimUpdateManyWithWhereNestedInput!]
}

input ClaimUpdateManyWithWhereNestedInput {
  where: ClaimScalarWhereInput!
  data: ClaimUpdateManyDataInput!
}

input ClaimUpdateWithoutCompanyDataInput {
  user: String
  email: String
  name: String
  pending: Boolean
  approved: Boolean
}

input ClaimUpdateWithWhereUniqueWithoutCompanyInput {
  where: ClaimWhereUniqueInput!
  data: ClaimUpdateWithoutCompanyDataInput!
}

input ClaimUpsertWithWhereUniqueWithoutCompanyInput {
  where: ClaimWhereUniqueInput!
  update: ClaimUpdateWithoutCompanyDataInput!
  create: ClaimCreateWithoutCompanyInput!
}

input ClaimWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: String
  user_not: String
  user_in: [String!]
  user_not_in: [String!]
  user_lt: String
  user_lte: String
  user_gt: String
  user_gte: String
  user_contains: String
  user_not_contains: String
  user_starts_with: String
  user_not_starts_with: String
  user_ends_with: String
  user_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  company: CompanyWhereInput
  pending: Boolean
  pending_not: Boolean
  approved: Boolean
  approved_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ClaimWhereInput!]
  OR: [ClaimWhereInput!]
  NOT: [ClaimWhereInput!]
}

input ClaimWhereUniqueInput {
  id: ID
}

type Company {
  id: ID!
  maintainer: String
  name: String!
  email: String
  phases: [Phase!]!
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service!]
  regions(where: RegionWhereInput, orderBy: RegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Region!]
  therapeutics(where: TherapeuticWhereInput, orderBy: TherapeuticOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Therapeutic!]
  studies(where: StudyWhereInput, orderBy: StudyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Study!]
  bids(where: BidWhereInput, orderBy: BidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bid!]
  claims(where: ClaimWhereInput, orderBy: ClaimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Claim!]
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  id: ID
  maintainer: String
  name: String!
  email: String
  phases: CompanyCreatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceCreateManyWithoutCompanyInput
  regions: RegionCreateManyWithoutCompaniesInput
  therapeutics: TherapeuticCreateManyWithoutCompaniesInput
  studies: StudyCreateManyWithoutCompanyInput
  bids: BidCreateManyWithoutCompanyInput
  claims: ClaimCreateManyWithoutCompanyInput
}

input CompanyCreateManyWithoutRegionsInput {
  create: [CompanyCreateWithoutRegionsInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateManyWithoutTherapeuticsInput {
  create: [CompanyCreateWithoutTherapeuticsInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateOneWithoutBidsInput {
  create: CompanyCreateWithoutBidsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutClaimsInput {
  create: CompanyCreateWithoutClaimsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutServicesInput {
  create: CompanyCreateWithoutServicesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutStudiesInput {
  create: CompanyCreateWithoutStudiesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreatephasesInput {
  set: [Phase!]
}

input CompanyCreateWithoutBidsInput {
  id: ID
  maintainer: String
  name: String!
  email: String
  phases: CompanyCreatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceCreateManyWithoutCompanyInput
  regions: RegionCreateManyWithoutCompaniesInput
  therapeutics: TherapeuticCreateManyWithoutCompaniesInput
  studies: StudyCreateManyWithoutCompanyInput
  claims: ClaimCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutClaimsInput {
  id: ID
  maintainer: String
  name: String!
  email: String
  phases: CompanyCreatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceCreateManyWithoutCompanyInput
  regions: RegionCreateManyWithoutCompaniesInput
  therapeutics: TherapeuticCreateManyWithoutCompaniesInput
  studies: StudyCreateManyWithoutCompanyInput
  bids: BidCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutRegionsInput {
  id: ID
  maintainer: String
  name: String!
  email: String
  phases: CompanyCreatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceCreateManyWithoutCompanyInput
  therapeutics: TherapeuticCreateManyWithoutCompaniesInput
  studies: StudyCreateManyWithoutCompanyInput
  bids: BidCreateManyWithoutCompanyInput
  claims: ClaimCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutServicesInput {
  id: ID
  maintainer: String
  name: String!
  email: String
  phases: CompanyCreatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  regions: RegionCreateManyWithoutCompaniesInput
  therapeutics: TherapeuticCreateManyWithoutCompaniesInput
  studies: StudyCreateManyWithoutCompanyInput
  bids: BidCreateManyWithoutCompanyInput
  claims: ClaimCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutStudiesInput {
  id: ID
  maintainer: String
  name: String!
  email: String
  phases: CompanyCreatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceCreateManyWithoutCompanyInput
  regions: RegionCreateManyWithoutCompaniesInput
  therapeutics: TherapeuticCreateManyWithoutCompaniesInput
  bids: BidCreateManyWithoutCompanyInput
  claims: ClaimCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutTherapeuticsInput {
  id: ID
  maintainer: String
  name: String!
  email: String
  phases: CompanyCreatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceCreateManyWithoutCompanyInput
  regions: RegionCreateManyWithoutCompaniesInput
  studies: StudyCreateManyWithoutCompanyInput
  bids: BidCreateManyWithoutCompanyInput
  claims: ClaimCreateManyWithoutCompanyInput
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  maintainer_ASC
  maintainer_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  logoURL_ASC
  logoURL_DESC
  website_ASC
  website_DESC
  linkedin_ASC
  linkedin_DESC
  overview_ASC
  overview_DESC
  headquarters_ASC
  headquarters_DESC
  companySize_ASC
  companySize_DESC
}

type CompanyPreviousValues {
  id: ID!
  maintainer: String
  name: String!
  email: String
  phases: [Phase!]!
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
}

input CompanyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  maintainer: String
  maintainer_not: String
  maintainer_in: [String!]
  maintainer_not_in: [String!]
  maintainer_lt: String
  maintainer_lte: String
  maintainer_gt: String
  maintainer_gte: String
  maintainer_contains: String
  maintainer_not_contains: String
  maintainer_starts_with: String
  maintainer_not_starts_with: String
  maintainer_ends_with: String
  maintainer_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  logoURL: String
  logoURL_not: String
  logoURL_in: [String!]
  logoURL_not_in: [String!]
  logoURL_lt: String
  logoURL_lte: String
  logoURL_gt: String
  logoURL_gte: String
  logoURL_contains: String
  logoURL_not_contains: String
  logoURL_starts_with: String
  logoURL_not_starts_with: String
  logoURL_ends_with: String
  logoURL_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  linkedin: String
  linkedin_not: String
  linkedin_in: [String!]
  linkedin_not_in: [String!]
  linkedin_lt: String
  linkedin_lte: String
  linkedin_gt: String
  linkedin_gte: String
  linkedin_contains: String
  linkedin_not_contains: String
  linkedin_starts_with: String
  linkedin_not_starts_with: String
  linkedin_ends_with: String
  linkedin_not_ends_with: String
  overview: String
  overview_not: String
  overview_in: [String!]
  overview_not_in: [String!]
  overview_lt: String
  overview_lte: String
  overview_gt: String
  overview_gte: String
  overview_contains: String
  overview_not_contains: String
  overview_starts_with: String
  overview_not_starts_with: String
  overview_ends_with: String
  overview_not_ends_with: String
  headquarters: String
  headquarters_not: String
  headquarters_in: [String!]
  headquarters_not_in: [String!]
  headquarters_lt: String
  headquarters_lte: String
  headquarters_gt: String
  headquarters_gte: String
  headquarters_contains: String
  headquarters_not_contains: String
  headquarters_starts_with: String
  headquarters_not_starts_with: String
  headquarters_ends_with: String
  headquarters_not_ends_with: String
  companySize: CompanySize
  companySize_not: CompanySize
  companySize_in: [CompanySize!]
  companySize_not_in: [CompanySize!]
  AND: [CompanyScalarWhereInput!]
  OR: [CompanyScalarWhereInput!]
  NOT: [CompanyScalarWhereInput!]
}

enum CompanySize {
  A
  B
  C
  D
  E
  F
  G
  H
  I
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

input CompanyUpdateInput {
  maintainer: String
  name: String
  email: String
  phases: CompanyUpdatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceUpdateManyWithoutCompanyInput
  regions: RegionUpdateManyWithoutCompaniesInput
  therapeutics: TherapeuticUpdateManyWithoutCompaniesInput
  studies: StudyUpdateManyWithoutCompanyInput
  bids: BidUpdateManyWithoutCompanyInput
  claims: ClaimUpdateManyWithoutCompanyInput
}

input CompanyUpdateManyDataInput {
  maintainer: String
  name: String
  email: String
  phases: CompanyUpdatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
}

input CompanyUpdateManyMutationInput {
  maintainer: String
  name: String
  email: String
  phases: CompanyUpdatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
}

input CompanyUpdateManyWithoutRegionsInput {
  create: [CompanyCreateWithoutRegionsInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutRegionsInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutRegionsInput!]
  deleteMany: [CompanyScalarWhereInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
}

input CompanyUpdateManyWithoutTherapeuticsInput {
  create: [CompanyCreateWithoutTherapeuticsInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutTherapeuticsInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutTherapeuticsInput!]
  deleteMany: [CompanyScalarWhereInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
}

input CompanyUpdateManyWithWhereNestedInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyDataInput!
}

input CompanyUpdateOneRequiredWithoutBidsInput {
  create: CompanyCreateWithoutBidsInput
  update: CompanyUpdateWithoutBidsDataInput
  upsert: CompanyUpsertWithoutBidsInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneRequiredWithoutClaimsInput {
  create: CompanyCreateWithoutClaimsInput
  update: CompanyUpdateWithoutClaimsDataInput
  upsert: CompanyUpsertWithoutClaimsInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneRequiredWithoutServicesInput {
  create: CompanyCreateWithoutServicesInput
  update: CompanyUpdateWithoutServicesDataInput
  upsert: CompanyUpsertWithoutServicesInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneRequiredWithoutStudiesInput {
  create: CompanyCreateWithoutStudiesInput
  update: CompanyUpdateWithoutStudiesDataInput
  upsert: CompanyUpsertWithoutStudiesInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdatephasesInput {
  set: [Phase!]
}

input CompanyUpdateWithoutBidsDataInput {
  maintainer: String
  name: String
  email: String
  phases: CompanyUpdatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceUpdateManyWithoutCompanyInput
  regions: RegionUpdateManyWithoutCompaniesInput
  therapeutics: TherapeuticUpdateManyWithoutCompaniesInput
  studies: StudyUpdateManyWithoutCompanyInput
  claims: ClaimUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutClaimsDataInput {
  maintainer: String
  name: String
  email: String
  phases: CompanyUpdatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceUpdateManyWithoutCompanyInput
  regions: RegionUpdateManyWithoutCompaniesInput
  therapeutics: TherapeuticUpdateManyWithoutCompaniesInput
  studies: StudyUpdateManyWithoutCompanyInput
  bids: BidUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutRegionsDataInput {
  maintainer: String
  name: String
  email: String
  phases: CompanyUpdatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceUpdateManyWithoutCompanyInput
  therapeutics: TherapeuticUpdateManyWithoutCompaniesInput
  studies: StudyUpdateManyWithoutCompanyInput
  bids: BidUpdateManyWithoutCompanyInput
  claims: ClaimUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutServicesDataInput {
  maintainer: String
  name: String
  email: String
  phases: CompanyUpdatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  regions: RegionUpdateManyWithoutCompaniesInput
  therapeutics: TherapeuticUpdateManyWithoutCompaniesInput
  studies: StudyUpdateManyWithoutCompanyInput
  bids: BidUpdateManyWithoutCompanyInput
  claims: ClaimUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutStudiesDataInput {
  maintainer: String
  name: String
  email: String
  phases: CompanyUpdatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceUpdateManyWithoutCompanyInput
  regions: RegionUpdateManyWithoutCompaniesInput
  therapeutics: TherapeuticUpdateManyWithoutCompaniesInput
  bids: BidUpdateManyWithoutCompanyInput
  claims: ClaimUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutTherapeuticsDataInput {
  maintainer: String
  name: String
  email: String
  phases: CompanyUpdatephasesInput
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceUpdateManyWithoutCompanyInput
  regions: RegionUpdateManyWithoutCompaniesInput
  studies: StudyUpdateManyWithoutCompanyInput
  bids: BidUpdateManyWithoutCompanyInput
  claims: ClaimUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithWhereUniqueWithoutRegionsInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutRegionsDataInput!
}

input CompanyUpdateWithWhereUniqueWithoutTherapeuticsInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutTherapeuticsDataInput!
}

input CompanyUpsertWithoutBidsInput {
  update: CompanyUpdateWithoutBidsDataInput!
  create: CompanyCreateWithoutBidsInput!
}

input CompanyUpsertWithoutClaimsInput {
  update: CompanyUpdateWithoutClaimsDataInput!
  create: CompanyCreateWithoutClaimsInput!
}

input CompanyUpsertWithoutServicesInput {
  update: CompanyUpdateWithoutServicesDataInput!
  create: CompanyCreateWithoutServicesInput!
}

input CompanyUpsertWithoutStudiesInput {
  update: CompanyUpdateWithoutStudiesDataInput!
  create: CompanyCreateWithoutStudiesInput!
}

input CompanyUpsertWithWhereUniqueWithoutRegionsInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutRegionsDataInput!
  create: CompanyCreateWithoutRegionsInput!
}

input CompanyUpsertWithWhereUniqueWithoutTherapeuticsInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutTherapeuticsDataInput!
  create: CompanyCreateWithoutTherapeuticsInput!
}

input CompanyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  maintainer: String
  maintainer_not: String
  maintainer_in: [String!]
  maintainer_not_in: [String!]
  maintainer_lt: String
  maintainer_lte: String
  maintainer_gt: String
  maintainer_gte: String
  maintainer_contains: String
  maintainer_not_contains: String
  maintainer_starts_with: String
  maintainer_not_starts_with: String
  maintainer_ends_with: String
  maintainer_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  logoURL: String
  logoURL_not: String
  logoURL_in: [String!]
  logoURL_not_in: [String!]
  logoURL_lt: String
  logoURL_lte: String
  logoURL_gt: String
  logoURL_gte: String
  logoURL_contains: String
  logoURL_not_contains: String
  logoURL_starts_with: String
  logoURL_not_starts_with: String
  logoURL_ends_with: String
  logoURL_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  linkedin: String
  linkedin_not: String
  linkedin_in: [String!]
  linkedin_not_in: [String!]
  linkedin_lt: String
  linkedin_lte: String
  linkedin_gt: String
  linkedin_gte: String
  linkedin_contains: String
  linkedin_not_contains: String
  linkedin_starts_with: String
  linkedin_not_starts_with: String
  linkedin_ends_with: String
  linkedin_not_ends_with: String
  overview: String
  overview_not: String
  overview_in: [String!]
  overview_not_in: [String!]
  overview_lt: String
  overview_lte: String
  overview_gt: String
  overview_gte: String
  overview_contains: String
  overview_not_contains: String
  overview_starts_with: String
  overview_not_starts_with: String
  overview_ends_with: String
  overview_not_ends_with: String
  headquarters: String
  headquarters_not: String
  headquarters_in: [String!]
  headquarters_not_in: [String!]
  headquarters_lt: String
  headquarters_lte: String
  headquarters_gt: String
  headquarters_gte: String
  headquarters_contains: String
  headquarters_not_contains: String
  headquarters_starts_with: String
  headquarters_not_starts_with: String
  headquarters_ends_with: String
  headquarters_not_ends_with: String
  companySize: CompanySize
  companySize_not: CompanySize
  companySize_in: [CompanySize!]
  companySize_not_in: [CompanySize!]
  services_every: ServiceWhereInput
  services_some: ServiceWhereInput
  services_none: ServiceWhereInput
  regions_every: RegionWhereInput
  regions_some: RegionWhereInput
  regions_none: RegionWhereInput
  therapeutics_every: TherapeuticWhereInput
  therapeutics_some: TherapeuticWhereInput
  therapeutics_none: TherapeuticWhereInput
  studies_every: StudyWhereInput
  studies_some: StudyWhereInput
  studies_none: StudyWhereInput
  bids_every: BidWhereInput
  bids_some: BidWhereInput
  bids_none: BidWhereInput
  claims_every: ClaimWhereInput
  claims_some: ClaimWhereInput
  claims_none: ClaimWhereInput
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

scalar Long

type Mutation {
  createBid(data: BidCreateInput!): Bid!
  updateBid(data: BidUpdateInput!, where: BidWhereUniqueInput!): Bid
  updateManyBids(data: BidUpdateManyMutationInput!, where: BidWhereInput): BatchPayload!
  upsertBid(where: BidWhereUniqueInput!, create: BidCreateInput!, update: BidUpdateInput!): Bid!
  deleteBid(where: BidWhereUniqueInput!): Bid
  deleteManyBids(where: BidWhereInput): BatchPayload!
  createClaim(data: ClaimCreateInput!): Claim!
  updateClaim(data: ClaimUpdateInput!, where: ClaimWhereUniqueInput!): Claim
  updateManyClaims(data: ClaimUpdateManyMutationInput!, where: ClaimWhereInput): BatchPayload!
  upsertClaim(where: ClaimWhereUniqueInput!, create: ClaimCreateInput!, update: ClaimUpdateInput!): Claim!
  deleteClaim(where: ClaimWhereUniqueInput!): Claim
  deleteManyClaims(where: ClaimWhereInput): BatchPayload!
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  createRegion(data: RegionCreateInput!): Region!
  updateRegion(data: RegionUpdateInput!, where: RegionWhereUniqueInput!): Region
  updateManyRegions(data: RegionUpdateManyMutationInput!, where: RegionWhereInput): BatchPayload!
  upsertRegion(where: RegionWhereUniqueInput!, create: RegionCreateInput!, update: RegionUpdateInput!): Region!
  deleteRegion(where: RegionWhereUniqueInput!): Region
  deleteManyRegions(where: RegionWhereInput): BatchPayload!
  createService(data: ServiceCreateInput!): Service!
  updateService(data: ServiceUpdateInput!, where: ServiceWhereUniqueInput!): Service
  upsertService(where: ServiceWhereUniqueInput!, create: ServiceCreateInput!, update: ServiceUpdateInput!): Service!
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteManyServices(where: ServiceWhereInput): BatchPayload!
  createServiceItem(data: ServiceItemCreateInput!): ServiceItem!
  updateServiceItem(data: ServiceItemUpdateInput!, where: ServiceItemWhereUniqueInput!): ServiceItem
  updateManyServiceItems(data: ServiceItemUpdateManyMutationInput!, where: ServiceItemWhereInput): BatchPayload!
  upsertServiceItem(where: ServiceItemWhereUniqueInput!, create: ServiceItemCreateInput!, update: ServiceItemUpdateInput!): ServiceItem!
  deleteServiceItem(where: ServiceItemWhereUniqueInput!): ServiceItem
  deleteManyServiceItems(where: ServiceItemWhereInput): BatchPayload!
  createSpecialty(data: SpecialtyCreateInput!): Specialty!
  updateSpecialty(data: SpecialtyUpdateInput!, where: SpecialtyWhereUniqueInput!): Specialty
  upsertSpecialty(where: SpecialtyWhereUniqueInput!, create: SpecialtyCreateInput!, update: SpecialtyUpdateInput!): Specialty!
  deleteSpecialty(where: SpecialtyWhereUniqueInput!): Specialty
  deleteManySpecialties(where: SpecialtyWhereInput): BatchPayload!
  createSpecialtyItem(data: SpecialtyItemCreateInput!): SpecialtyItem!
  updateSpecialtyItem(data: SpecialtyItemUpdateInput!, where: SpecialtyItemWhereUniqueInput!): SpecialtyItem
  updateManySpecialtyItems(data: SpecialtyItemUpdateManyMutationInput!, where: SpecialtyItemWhereInput): BatchPayload!
  upsertSpecialtyItem(where: SpecialtyItemWhereUniqueInput!, create: SpecialtyItemCreateInput!, update: SpecialtyItemUpdateInput!): SpecialtyItem!
  deleteSpecialtyItem(where: SpecialtyItemWhereUniqueInput!): SpecialtyItem
  deleteManySpecialtyItems(where: SpecialtyItemWhereInput): BatchPayload!
  createStudy(data: StudyCreateInput!): Study!
  updateStudy(data: StudyUpdateInput!, where: StudyWhereUniqueInput!): Study
  updateManyStudies(data: StudyUpdateManyMutationInput!, where: StudyWhereInput): BatchPayload!
  upsertStudy(where: StudyWhereUniqueInput!, create: StudyCreateInput!, update: StudyUpdateInput!): Study!
  deleteStudy(where: StudyWhereUniqueInput!): Study
  deleteManyStudies(where: StudyWhereInput): BatchPayload!
  createTherapeutic(data: TherapeuticCreateInput!): Therapeutic!
  updateTherapeutic(data: TherapeuticUpdateInput!, where: TherapeuticWhereUniqueInput!): Therapeutic
  updateManyTherapeutics(data: TherapeuticUpdateManyMutationInput!, where: TherapeuticWhereInput): BatchPayload!
  upsertTherapeutic(where: TherapeuticWhereUniqueInput!, create: TherapeuticCreateInput!, update: TherapeuticUpdateInput!): Therapeutic!
  deleteTherapeutic(where: TherapeuticWhereUniqueInput!): Therapeutic
  deleteManyTherapeutics(where: TherapeuticWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Phase {
  I
  II
  III
  IV
}

type Query {
  bid(where: BidWhereUniqueInput!): Bid
  bids(where: BidWhereInput, orderBy: BidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bid]!
  bidsConnection(where: BidWhereInput, orderBy: BidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BidConnection!
  claim(where: ClaimWhereUniqueInput!): Claim
  claims(where: ClaimWhereInput, orderBy: ClaimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Claim]!
  claimsConnection(where: ClaimWhereInput, orderBy: ClaimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClaimConnection!
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  region(where: RegionWhereUniqueInput!): Region
  regions(where: RegionWhereInput, orderBy: RegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Region]!
  regionsConnection(where: RegionWhereInput, orderBy: RegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RegionConnection!
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service]!
  servicesConnection(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceConnection!
  serviceItem(where: ServiceItemWhereUniqueInput!): ServiceItem
  serviceItems(where: ServiceItemWhereInput, orderBy: ServiceItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ServiceItem]!
  serviceItemsConnection(where: ServiceItemWhereInput, orderBy: ServiceItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceItemConnection!
  specialty(where: SpecialtyWhereUniqueInput!): Specialty
  specialties(where: SpecialtyWhereInput, orderBy: SpecialtyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Specialty]!
  specialtiesConnection(where: SpecialtyWhereInput, orderBy: SpecialtyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpecialtyConnection!
  specialtyItem(where: SpecialtyItemWhereUniqueInput!): SpecialtyItem
  specialtyItems(where: SpecialtyItemWhereInput, orderBy: SpecialtyItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SpecialtyItem]!
  specialtyItemsConnection(where: SpecialtyItemWhereInput, orderBy: SpecialtyItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpecialtyItemConnection!
  study(where: StudyWhereUniqueInput!): Study
  studies(where: StudyWhereInput, orderBy: StudyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Study]!
  studiesConnection(where: StudyWhereInput, orderBy: StudyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StudyConnection!
  therapeutic(where: TherapeuticWhereUniqueInput!): Therapeutic
  therapeutics(where: TherapeuticWhereInput, orderBy: TherapeuticOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Therapeutic]!
  therapeuticsConnection(where: TherapeuticWhereInput, orderBy: TherapeuticOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TherapeuticConnection!
  node(id: ID!): Node
}

type Region {
  id: ID!
  name: String!
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
}

type RegionConnection {
  pageInfo: PageInfo!
  edges: [RegionEdge]!
  aggregate: AggregateRegion!
}

input RegionCreateInput {
  id: ID
  name: String!
  companies: CompanyCreateManyWithoutRegionsInput
}

input RegionCreateManyWithoutCompaniesInput {
  create: [RegionCreateWithoutCompaniesInput!]
  connect: [RegionWhereUniqueInput!]
}

input RegionCreateWithoutCompaniesInput {
  id: ID
  name: String!
}

type RegionEdge {
  node: Region!
  cursor: String!
}

enum RegionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type RegionPreviousValues {
  id: ID!
  name: String!
}

input RegionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [RegionScalarWhereInput!]
  OR: [RegionScalarWhereInput!]
  NOT: [RegionScalarWhereInput!]
}

type RegionSubscriptionPayload {
  mutation: MutationType!
  node: Region
  updatedFields: [String!]
  previousValues: RegionPreviousValues
}

input RegionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RegionWhereInput
  AND: [RegionSubscriptionWhereInput!]
  OR: [RegionSubscriptionWhereInput!]
  NOT: [RegionSubscriptionWhereInput!]
}

input RegionUpdateInput {
  name: String
  companies: CompanyUpdateManyWithoutRegionsInput
}

input RegionUpdateManyDataInput {
  name: String
}

input RegionUpdateManyMutationInput {
  name: String
}

input RegionUpdateManyWithoutCompaniesInput {
  create: [RegionCreateWithoutCompaniesInput!]
  delete: [RegionWhereUniqueInput!]
  connect: [RegionWhereUniqueInput!]
  set: [RegionWhereUniqueInput!]
  disconnect: [RegionWhereUniqueInput!]
  update: [RegionUpdateWithWhereUniqueWithoutCompaniesInput!]
  upsert: [RegionUpsertWithWhereUniqueWithoutCompaniesInput!]
  deleteMany: [RegionScalarWhereInput!]
  updateMany: [RegionUpdateManyWithWhereNestedInput!]
}

input RegionUpdateManyWithWhereNestedInput {
  where: RegionScalarWhereInput!
  data: RegionUpdateManyDataInput!
}

input RegionUpdateWithoutCompaniesDataInput {
  name: String
}

input RegionUpdateWithWhereUniqueWithoutCompaniesInput {
  where: RegionWhereUniqueInput!
  data: RegionUpdateWithoutCompaniesDataInput!
}

input RegionUpsertWithWhereUniqueWithoutCompaniesInput {
  where: RegionWhereUniqueInput!
  update: RegionUpdateWithoutCompaniesDataInput!
  create: RegionCreateWithoutCompaniesInput!
}

input RegionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  companies_every: CompanyWhereInput
  companies_some: CompanyWhereInput
  companies_none: CompanyWhereInput
  AND: [RegionWhereInput!]
  OR: [RegionWhereInput!]
  NOT: [RegionWhereInput!]
}

input RegionWhereUniqueInput {
  id: ID
  name: String
}

type Service {
  id: ID!
  info: ServiceItem!
  company: Company!
  specialties(where: SpecialtyWhereInput, orderBy: SpecialtyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Specialty!]
}

type ServiceConnection {
  pageInfo: PageInfo!
  edges: [ServiceEdge]!
  aggregate: AggregateService!
}

input ServiceCreateInput {
  id: ID
  info: ServiceItemCreateOneWithoutServicesInput!
  company: CompanyCreateOneWithoutServicesInput!
  specialties: SpecialtyCreateManyWithoutServiceInput
}

input ServiceCreateManyWithoutCompanyInput {
  create: [ServiceCreateWithoutCompanyInput!]
  connect: [ServiceWhereUniqueInput!]
}

input ServiceCreateManyWithoutInfoInput {
  create: [ServiceCreateWithoutInfoInput!]
  connect: [ServiceWhereUniqueInput!]
}

input ServiceCreateOneWithoutSpecialtiesInput {
  create: ServiceCreateWithoutSpecialtiesInput
  connect: ServiceWhereUniqueInput
}

input ServiceCreateWithoutCompanyInput {
  id: ID
  info: ServiceItemCreateOneWithoutServicesInput!
  specialties: SpecialtyCreateManyWithoutServiceInput
}

input ServiceCreateWithoutInfoInput {
  id: ID
  company: CompanyCreateOneWithoutServicesInput!
  specialties: SpecialtyCreateManyWithoutServiceInput
}

input ServiceCreateWithoutSpecialtiesInput {
  id: ID
  info: ServiceItemCreateOneWithoutServicesInput!
  company: CompanyCreateOneWithoutServicesInput!
}

type ServiceEdge {
  node: Service!
  cursor: String!
}

type ServiceItem {
  id: ID!
  name: String!
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service!]
}

type ServiceItemConnection {
  pageInfo: PageInfo!
  edges: [ServiceItemEdge]!
  aggregate: AggregateServiceItem!
}

input ServiceItemCreateInput {
  id: ID
  name: String!
  services: ServiceCreateManyWithoutInfoInput
}

input ServiceItemCreateOneWithoutServicesInput {
  create: ServiceItemCreateWithoutServicesInput
  connect: ServiceItemWhereUniqueInput
}

input ServiceItemCreateWithoutServicesInput {
  id: ID
  name: String!
}

type ServiceItemEdge {
  node: ServiceItem!
  cursor: String!
}

enum ServiceItemOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ServiceItemPreviousValues {
  id: ID!
  name: String!
}

type ServiceItemSubscriptionPayload {
  mutation: MutationType!
  node: ServiceItem
  updatedFields: [String!]
  previousValues: ServiceItemPreviousValues
}

input ServiceItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ServiceItemWhereInput
  AND: [ServiceItemSubscriptionWhereInput!]
  OR: [ServiceItemSubscriptionWhereInput!]
  NOT: [ServiceItemSubscriptionWhereInput!]
}

input ServiceItemUpdateInput {
  name: String
  services: ServiceUpdateManyWithoutInfoInput
}

input ServiceItemUpdateManyMutationInput {
  name: String
}

input ServiceItemUpdateOneRequiredWithoutServicesInput {
  create: ServiceItemCreateWithoutServicesInput
  update: ServiceItemUpdateWithoutServicesDataInput
  upsert: ServiceItemUpsertWithoutServicesInput
  connect: ServiceItemWhereUniqueInput
}

input ServiceItemUpdateWithoutServicesDataInput {
  name: String
}

input ServiceItemUpsertWithoutServicesInput {
  update: ServiceItemUpdateWithoutServicesDataInput!
  create: ServiceItemCreateWithoutServicesInput!
}

input ServiceItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  services_every: ServiceWhereInput
  services_some: ServiceWhereInput
  services_none: ServiceWhereInput
  AND: [ServiceItemWhereInput!]
  OR: [ServiceItemWhereInput!]
  NOT: [ServiceItemWhereInput!]
}

input ServiceItemWhereUniqueInput {
  id: ID
  name: String
}

enum ServiceOrderByInput {
  id_ASC
  id_DESC
}

type ServicePreviousValues {
  id: ID!
}

input ServiceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [ServiceScalarWhereInput!]
  OR: [ServiceScalarWhereInput!]
  NOT: [ServiceScalarWhereInput!]
}

type ServiceSubscriptionPayload {
  mutation: MutationType!
  node: Service
  updatedFields: [String!]
  previousValues: ServicePreviousValues
}

input ServiceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ServiceWhereInput
  AND: [ServiceSubscriptionWhereInput!]
  OR: [ServiceSubscriptionWhereInput!]
  NOT: [ServiceSubscriptionWhereInput!]
}

input ServiceUpdateInput {
  info: ServiceItemUpdateOneRequiredWithoutServicesInput
  company: CompanyUpdateOneRequiredWithoutServicesInput
  specialties: SpecialtyUpdateManyWithoutServiceInput
}

input ServiceUpdateManyWithoutCompanyInput {
  create: [ServiceCreateWithoutCompanyInput!]
  delete: [ServiceWhereUniqueInput!]
  connect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  disconnect: [ServiceWhereUniqueInput!]
  update: [ServiceUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [ServiceUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [ServiceScalarWhereInput!]
}

input ServiceUpdateManyWithoutInfoInput {
  create: [ServiceCreateWithoutInfoInput!]
  delete: [ServiceWhereUniqueInput!]
  connect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  disconnect: [ServiceWhereUniqueInput!]
  update: [ServiceUpdateWithWhereUniqueWithoutInfoInput!]
  upsert: [ServiceUpsertWithWhereUniqueWithoutInfoInput!]
  deleteMany: [ServiceScalarWhereInput!]
}

input ServiceUpdateOneWithoutSpecialtiesInput {
  create: ServiceCreateWithoutSpecialtiesInput
  update: ServiceUpdateWithoutSpecialtiesDataInput
  upsert: ServiceUpsertWithoutSpecialtiesInput
  delete: Boolean
  disconnect: Boolean
  connect: ServiceWhereUniqueInput
}

input ServiceUpdateWithoutCompanyDataInput {
  info: ServiceItemUpdateOneRequiredWithoutServicesInput
  specialties: SpecialtyUpdateManyWithoutServiceInput
}

input ServiceUpdateWithoutInfoDataInput {
  company: CompanyUpdateOneRequiredWithoutServicesInput
  specialties: SpecialtyUpdateManyWithoutServiceInput
}

input ServiceUpdateWithoutSpecialtiesDataInput {
  info: ServiceItemUpdateOneRequiredWithoutServicesInput
  company: CompanyUpdateOneRequiredWithoutServicesInput
}

input ServiceUpdateWithWhereUniqueWithoutCompanyInput {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateWithoutCompanyDataInput!
}

input ServiceUpdateWithWhereUniqueWithoutInfoInput {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateWithoutInfoDataInput!
}

input ServiceUpsertWithoutSpecialtiesInput {
  update: ServiceUpdateWithoutSpecialtiesDataInput!
  create: ServiceCreateWithoutSpecialtiesInput!
}

input ServiceUpsertWithWhereUniqueWithoutCompanyInput {
  where: ServiceWhereUniqueInput!
  update: ServiceUpdateWithoutCompanyDataInput!
  create: ServiceCreateWithoutCompanyInput!
}

input ServiceUpsertWithWhereUniqueWithoutInfoInput {
  where: ServiceWhereUniqueInput!
  update: ServiceUpdateWithoutInfoDataInput!
  create: ServiceCreateWithoutInfoInput!
}

input ServiceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  info: ServiceItemWhereInput
  company: CompanyWhereInput
  specialties_every: SpecialtyWhereInput
  specialties_some: SpecialtyWhereInput
  specialties_none: SpecialtyWhereInput
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
}

input ServiceWhereUniqueInput {
  id: ID
}

type Specialty {
  id: ID!
  info: SpecialtyItem!
  service: Service
  sub_specialties(where: SpecialtyWhereInput, orderBy: SpecialtyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Specialty!]
}

type SpecialtyConnection {
  pageInfo: PageInfo!
  edges: [SpecialtyEdge]!
  aggregate: AggregateSpecialty!
}

input SpecialtyCreateInput {
  id: ID
  info: SpecialtyItemCreateOneInput!
  service: ServiceCreateOneWithoutSpecialtiesInput
  sub_specialties: SpecialtyCreateManyInput
}

input SpecialtyCreateManyInput {
  create: [SpecialtyCreateInput!]
  connect: [SpecialtyWhereUniqueInput!]
}

input SpecialtyCreateManyWithoutServiceInput {
  create: [SpecialtyCreateWithoutServiceInput!]
  connect: [SpecialtyWhereUniqueInput!]
}

input SpecialtyCreateWithoutServiceInput {
  id: ID
  info: SpecialtyItemCreateOneInput!
  sub_specialties: SpecialtyCreateManyInput
}

type SpecialtyEdge {
  node: Specialty!
  cursor: String!
}

type SpecialtyItem {
  id: ID!
  name: String!
}

type SpecialtyItemConnection {
  pageInfo: PageInfo!
  edges: [SpecialtyItemEdge]!
  aggregate: AggregateSpecialtyItem!
}

input SpecialtyItemCreateInput {
  id: ID
  name: String!
}

input SpecialtyItemCreateOneInput {
  create: SpecialtyItemCreateInput
  connect: SpecialtyItemWhereUniqueInput
}

type SpecialtyItemEdge {
  node: SpecialtyItem!
  cursor: String!
}

enum SpecialtyItemOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type SpecialtyItemPreviousValues {
  id: ID!
  name: String!
}

type SpecialtyItemSubscriptionPayload {
  mutation: MutationType!
  node: SpecialtyItem
  updatedFields: [String!]
  previousValues: SpecialtyItemPreviousValues
}

input SpecialtyItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SpecialtyItemWhereInput
  AND: [SpecialtyItemSubscriptionWhereInput!]
  OR: [SpecialtyItemSubscriptionWhereInput!]
  NOT: [SpecialtyItemSubscriptionWhereInput!]
}

input SpecialtyItemUpdateDataInput {
  name: String
}

input SpecialtyItemUpdateInput {
  name: String
}

input SpecialtyItemUpdateManyMutationInput {
  name: String
}

input SpecialtyItemUpdateOneRequiredInput {
  create: SpecialtyItemCreateInput
  update: SpecialtyItemUpdateDataInput
  upsert: SpecialtyItemUpsertNestedInput
  connect: SpecialtyItemWhereUniqueInput
}

input SpecialtyItemUpsertNestedInput {
  update: SpecialtyItemUpdateDataInput!
  create: SpecialtyItemCreateInput!
}

input SpecialtyItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [SpecialtyItemWhereInput!]
  OR: [SpecialtyItemWhereInput!]
  NOT: [SpecialtyItemWhereInput!]
}

input SpecialtyItemWhereUniqueInput {
  id: ID
  name: String
}

enum SpecialtyOrderByInput {
  id_ASC
  id_DESC
}

type SpecialtyPreviousValues {
  id: ID!
}

input SpecialtyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [SpecialtyScalarWhereInput!]
  OR: [SpecialtyScalarWhereInput!]
  NOT: [SpecialtyScalarWhereInput!]
}

type SpecialtySubscriptionPayload {
  mutation: MutationType!
  node: Specialty
  updatedFields: [String!]
  previousValues: SpecialtyPreviousValues
}

input SpecialtySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SpecialtyWhereInput
  AND: [SpecialtySubscriptionWhereInput!]
  OR: [SpecialtySubscriptionWhereInput!]
  NOT: [SpecialtySubscriptionWhereInput!]
}

input SpecialtyUpdateDataInput {
  info: SpecialtyItemUpdateOneRequiredInput
  service: ServiceUpdateOneWithoutSpecialtiesInput
  sub_specialties: SpecialtyUpdateManyInput
}

input SpecialtyUpdateInput {
  info: SpecialtyItemUpdateOneRequiredInput
  service: ServiceUpdateOneWithoutSpecialtiesInput
  sub_specialties: SpecialtyUpdateManyInput
}

input SpecialtyUpdateManyInput {
  create: [SpecialtyCreateInput!]
  update: [SpecialtyUpdateWithWhereUniqueNestedInput!]
  upsert: [SpecialtyUpsertWithWhereUniqueNestedInput!]
  delete: [SpecialtyWhereUniqueInput!]
  connect: [SpecialtyWhereUniqueInput!]
  set: [SpecialtyWhereUniqueInput!]
  disconnect: [SpecialtyWhereUniqueInput!]
  deleteMany: [SpecialtyScalarWhereInput!]
}

input SpecialtyUpdateManyWithoutServiceInput {
  create: [SpecialtyCreateWithoutServiceInput!]
  delete: [SpecialtyWhereUniqueInput!]
  connect: [SpecialtyWhereUniqueInput!]
  set: [SpecialtyWhereUniqueInput!]
  disconnect: [SpecialtyWhereUniqueInput!]
  update: [SpecialtyUpdateWithWhereUniqueWithoutServiceInput!]
  upsert: [SpecialtyUpsertWithWhereUniqueWithoutServiceInput!]
  deleteMany: [SpecialtyScalarWhereInput!]
}

input SpecialtyUpdateWithoutServiceDataInput {
  info: SpecialtyItemUpdateOneRequiredInput
  sub_specialties: SpecialtyUpdateManyInput
}

input SpecialtyUpdateWithWhereUniqueNestedInput {
  where: SpecialtyWhereUniqueInput!
  data: SpecialtyUpdateDataInput!
}

input SpecialtyUpdateWithWhereUniqueWithoutServiceInput {
  where: SpecialtyWhereUniqueInput!
  data: SpecialtyUpdateWithoutServiceDataInput!
}

input SpecialtyUpsertWithWhereUniqueNestedInput {
  where: SpecialtyWhereUniqueInput!
  update: SpecialtyUpdateDataInput!
  create: SpecialtyCreateInput!
}

input SpecialtyUpsertWithWhereUniqueWithoutServiceInput {
  where: SpecialtyWhereUniqueInput!
  update: SpecialtyUpdateWithoutServiceDataInput!
  create: SpecialtyCreateWithoutServiceInput!
}

input SpecialtyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  info: SpecialtyItemWhereInput
  service: ServiceWhereInput
  sub_specialties_every: SpecialtyWhereInput
  sub_specialties_some: SpecialtyWhereInput
  sub_specialties_none: SpecialtyWhereInput
  AND: [SpecialtyWhereInput!]
  OR: [SpecialtyWhereInput!]
  NOT: [SpecialtyWhereInput!]
}

input SpecialtyWhereUniqueInput {
  id: ID
}

type Study {
  id: ID!
  name: String!
  area: String!
  protocol_number: String!
  title: String!
  phase: Int!
  services: Int!
  modified_date: DateTime!
  status: String!
  company: Company!
}

type StudyConnection {
  pageInfo: PageInfo!
  edges: [StudyEdge]!
  aggregate: AggregateStudy!
}

input StudyCreateInput {
  id: ID
  name: String!
  area: String!
  protocol_number: String!
  title: String!
  phase: Int!
  services: Int!
  modified_date: DateTime!
  status: String!
  company: CompanyCreateOneWithoutStudiesInput!
}

input StudyCreateManyWithoutCompanyInput {
  create: [StudyCreateWithoutCompanyInput!]
  connect: [StudyWhereUniqueInput!]
}

input StudyCreateOneInput {
  create: StudyCreateInput
  connect: StudyWhereUniqueInput
}

input StudyCreateWithoutCompanyInput {
  id: ID
  name: String!
  area: String!
  protocol_number: String!
  title: String!
  phase: Int!
  services: Int!
  modified_date: DateTime!
  status: String!
}

type StudyEdge {
  node: Study!
  cursor: String!
}

enum StudyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  area_ASC
  area_DESC
  protocol_number_ASC
  protocol_number_DESC
  title_ASC
  title_DESC
  phase_ASC
  phase_DESC
  services_ASC
  services_DESC
  modified_date_ASC
  modified_date_DESC
  status_ASC
  status_DESC
}

type StudyPreviousValues {
  id: ID!
  name: String!
  area: String!
  protocol_number: String!
  title: String!
  phase: Int!
  services: Int!
  modified_date: DateTime!
  status: String!
}

input StudyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  area: String
  area_not: String
  area_in: [String!]
  area_not_in: [String!]
  area_lt: String
  area_lte: String
  area_gt: String
  area_gte: String
  area_contains: String
  area_not_contains: String
  area_starts_with: String
  area_not_starts_with: String
  area_ends_with: String
  area_not_ends_with: String
  protocol_number: String
  protocol_number_not: String
  protocol_number_in: [String!]
  protocol_number_not_in: [String!]
  protocol_number_lt: String
  protocol_number_lte: String
  protocol_number_gt: String
  protocol_number_gte: String
  protocol_number_contains: String
  protocol_number_not_contains: String
  protocol_number_starts_with: String
  protocol_number_not_starts_with: String
  protocol_number_ends_with: String
  protocol_number_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  phase: Int
  phase_not: Int
  phase_in: [Int!]
  phase_not_in: [Int!]
  phase_lt: Int
  phase_lte: Int
  phase_gt: Int
  phase_gte: Int
  services: Int
  services_not: Int
  services_in: [Int!]
  services_not_in: [Int!]
  services_lt: Int
  services_lte: Int
  services_gt: Int
  services_gte: Int
  modified_date: DateTime
  modified_date_not: DateTime
  modified_date_in: [DateTime!]
  modified_date_not_in: [DateTime!]
  modified_date_lt: DateTime
  modified_date_lte: DateTime
  modified_date_gt: DateTime
  modified_date_gte: DateTime
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  AND: [StudyScalarWhereInput!]
  OR: [StudyScalarWhereInput!]
  NOT: [StudyScalarWhereInput!]
}

type StudySubscriptionPayload {
  mutation: MutationType!
  node: Study
  updatedFields: [String!]
  previousValues: StudyPreviousValues
}

input StudySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StudyWhereInput
  AND: [StudySubscriptionWhereInput!]
  OR: [StudySubscriptionWhereInput!]
  NOT: [StudySubscriptionWhereInput!]
}

input StudyUpdateDataInput {
  name: String
  area: String
  protocol_number: String
  title: String
  phase: Int
  services: Int
  modified_date: DateTime
  status: String
  company: CompanyUpdateOneRequiredWithoutStudiesInput
}

input StudyUpdateInput {
  name: String
  area: String
  protocol_number: String
  title: String
  phase: Int
  services: Int
  modified_date: DateTime
  status: String
  company: CompanyUpdateOneRequiredWithoutStudiesInput
}

input StudyUpdateManyDataInput {
  name: String
  area: String
  protocol_number: String
  title: String
  phase: Int
  services: Int
  modified_date: DateTime
  status: String
}

input StudyUpdateManyMutationInput {
  name: String
  area: String
  protocol_number: String
  title: String
  phase: Int
  services: Int
  modified_date: DateTime
  status: String
}

input StudyUpdateManyWithoutCompanyInput {
  create: [StudyCreateWithoutCompanyInput!]
  delete: [StudyWhereUniqueInput!]
  connect: [StudyWhereUniqueInput!]
  set: [StudyWhereUniqueInput!]
  disconnect: [StudyWhereUniqueInput!]
  update: [StudyUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [StudyUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [StudyScalarWhereInput!]
  updateMany: [StudyUpdateManyWithWhereNestedInput!]
}

input StudyUpdateManyWithWhereNestedInput {
  where: StudyScalarWhereInput!
  data: StudyUpdateManyDataInput!
}

input StudyUpdateOneRequiredInput {
  create: StudyCreateInput
  update: StudyUpdateDataInput
  upsert: StudyUpsertNestedInput
  connect: StudyWhereUniqueInput
}

input StudyUpdateWithoutCompanyDataInput {
  name: String
  area: String
  protocol_number: String
  title: String
  phase: Int
  services: Int
  modified_date: DateTime
  status: String
}

input StudyUpdateWithWhereUniqueWithoutCompanyInput {
  where: StudyWhereUniqueInput!
  data: StudyUpdateWithoutCompanyDataInput!
}

input StudyUpsertNestedInput {
  update: StudyUpdateDataInput!
  create: StudyCreateInput!
}

input StudyUpsertWithWhereUniqueWithoutCompanyInput {
  where: StudyWhereUniqueInput!
  update: StudyUpdateWithoutCompanyDataInput!
  create: StudyCreateWithoutCompanyInput!
}

input StudyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  area: String
  area_not: String
  area_in: [String!]
  area_not_in: [String!]
  area_lt: String
  area_lte: String
  area_gt: String
  area_gte: String
  area_contains: String
  area_not_contains: String
  area_starts_with: String
  area_not_starts_with: String
  area_ends_with: String
  area_not_ends_with: String
  protocol_number: String
  protocol_number_not: String
  protocol_number_in: [String!]
  protocol_number_not_in: [String!]
  protocol_number_lt: String
  protocol_number_lte: String
  protocol_number_gt: String
  protocol_number_gte: String
  protocol_number_contains: String
  protocol_number_not_contains: String
  protocol_number_starts_with: String
  protocol_number_not_starts_with: String
  protocol_number_ends_with: String
  protocol_number_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  phase: Int
  phase_not: Int
  phase_in: [Int!]
  phase_not_in: [Int!]
  phase_lt: Int
  phase_lte: Int
  phase_gt: Int
  phase_gte: Int
  services: Int
  services_not: Int
  services_in: [Int!]
  services_not_in: [Int!]
  services_lt: Int
  services_lte: Int
  services_gt: Int
  services_gte: Int
  modified_date: DateTime
  modified_date_not: DateTime
  modified_date_in: [DateTime!]
  modified_date_not_in: [DateTime!]
  modified_date_lt: DateTime
  modified_date_lte: DateTime
  modified_date_gt: DateTime
  modified_date_gte: DateTime
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  company: CompanyWhereInput
  AND: [StudyWhereInput!]
  OR: [StudyWhereInput!]
  NOT: [StudyWhereInput!]
}

input StudyWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  bid(where: BidSubscriptionWhereInput): BidSubscriptionPayload
  claim(where: ClaimSubscriptionWhereInput): ClaimSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  region(where: RegionSubscriptionWhereInput): RegionSubscriptionPayload
  service(where: ServiceSubscriptionWhereInput): ServiceSubscriptionPayload
  serviceItem(where: ServiceItemSubscriptionWhereInput): ServiceItemSubscriptionPayload
  specialty(where: SpecialtySubscriptionWhereInput): SpecialtySubscriptionPayload
  specialtyItem(where: SpecialtyItemSubscriptionWhereInput): SpecialtyItemSubscriptionPayload
  study(where: StudySubscriptionWhereInput): StudySubscriptionPayload
  therapeutic(where: TherapeuticSubscriptionWhereInput): TherapeuticSubscriptionPayload
}

type Therapeutic {
  id: ID!
  name: String!
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
}

type TherapeuticConnection {
  pageInfo: PageInfo!
  edges: [TherapeuticEdge]!
  aggregate: AggregateTherapeutic!
}

input TherapeuticCreateInput {
  id: ID
  name: String!
  companies: CompanyCreateManyWithoutTherapeuticsInput
}

input TherapeuticCreateManyWithoutCompaniesInput {
  create: [TherapeuticCreateWithoutCompaniesInput!]
  connect: [TherapeuticWhereUniqueInput!]
}

input TherapeuticCreateWithoutCompaniesInput {
  id: ID
  name: String!
}

type TherapeuticEdge {
  node: Therapeutic!
  cursor: String!
}

enum TherapeuticOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type TherapeuticPreviousValues {
  id: ID!
  name: String!
}

input TherapeuticScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TherapeuticScalarWhereInput!]
  OR: [TherapeuticScalarWhereInput!]
  NOT: [TherapeuticScalarWhereInput!]
}

type TherapeuticSubscriptionPayload {
  mutation: MutationType!
  node: Therapeutic
  updatedFields: [String!]
  previousValues: TherapeuticPreviousValues
}

input TherapeuticSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TherapeuticWhereInput
  AND: [TherapeuticSubscriptionWhereInput!]
  OR: [TherapeuticSubscriptionWhereInput!]
  NOT: [TherapeuticSubscriptionWhereInput!]
}

input TherapeuticUpdateInput {
  name: String
  companies: CompanyUpdateManyWithoutTherapeuticsInput
}

input TherapeuticUpdateManyDataInput {
  name: String
}

input TherapeuticUpdateManyMutationInput {
  name: String
}

input TherapeuticUpdateManyWithoutCompaniesInput {
  create: [TherapeuticCreateWithoutCompaniesInput!]
  delete: [TherapeuticWhereUniqueInput!]
  connect: [TherapeuticWhereUniqueInput!]
  set: [TherapeuticWhereUniqueInput!]
  disconnect: [TherapeuticWhereUniqueInput!]
  update: [TherapeuticUpdateWithWhereUniqueWithoutCompaniesInput!]
  upsert: [TherapeuticUpsertWithWhereUniqueWithoutCompaniesInput!]
  deleteMany: [TherapeuticScalarWhereInput!]
  updateMany: [TherapeuticUpdateManyWithWhereNestedInput!]
}

input TherapeuticUpdateManyWithWhereNestedInput {
  where: TherapeuticScalarWhereInput!
  data: TherapeuticUpdateManyDataInput!
}

input TherapeuticUpdateWithoutCompaniesDataInput {
  name: String
}

input TherapeuticUpdateWithWhereUniqueWithoutCompaniesInput {
  where: TherapeuticWhereUniqueInput!
  data: TherapeuticUpdateWithoutCompaniesDataInput!
}

input TherapeuticUpsertWithWhereUniqueWithoutCompaniesInput {
  where: TherapeuticWhereUniqueInput!
  update: TherapeuticUpdateWithoutCompaniesDataInput!
  create: TherapeuticCreateWithoutCompaniesInput!
}

input TherapeuticWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  companies_every: CompanyWhereInput
  companies_some: CompanyWhereInput
  companies_none: CompanyWhereInput
  AND: [TherapeuticWhereInput!]
  OR: [TherapeuticWhereInput!]
  NOT: [TherapeuticWhereInput!]
}

input TherapeuticWhereUniqueInput {
  id: ID
  name: String
}
`
      }
    